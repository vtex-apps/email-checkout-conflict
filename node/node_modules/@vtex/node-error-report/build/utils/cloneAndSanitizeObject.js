"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_stream_1 = __importDefault(require("is-stream"));
exports.authFields = [
    'authorization',
    'authtoken',
    'auth',
    'token',
    'proxy-authorization',
    'vtexidclientautcookie',
    'x-vtex-credential',
    'x-vtex-api-appkey',
    'x-vtex-api-apptoken',
];
exports.CIRCULAR_STR = '[circular]';
exports.ARRAY_STR = '[array]';
exports.OBJECT_STR = '[object]';
exports.SENSITIVE_STR = '[sensitive]';
exports.TRUNCATED_STR = '[truncated]';
/**
 * Sanitizes an authorization header in the formats "$type $credentials" or "$credentials".
 *
 * It works differently for each credential type:
 * - JWT: removes the "verify signature" section
 * - Other: removes the full credential
 *
 * @param auth The authorization header in the format "$type $credentials"
 */
function sanitizeAuth(auth) {
    // JWT tokens are composed by three string parts separated by '.'
    const tokenParts = auth.split('.');
    if (tokenParts.length === 3) {
        return `${tokenParts[0]}.${tokenParts[1]}.${exports.SENSITIVE_STR}`;
    }
    return exports.SENSITIVE_STR;
}
exports.sanitizeAuth = sanitizeAuth;
function cloneAndSanitizeObject(element, maxStrSize, depth, seenObjects = [], currentKey) {
    if (element == null) {
        return element;
    }
    const objType = typeof element;
    if (objType === 'object') {
        if (seenObjects.includes(element)) {
            return exports.CIRCULAR_STR;
        }
        if (Buffer.isBuffer(element)) {
            return { type: 'buffer', byteLength: Buffer.byteLength(element) };
        }
        if (is_stream_1.default(element)) {
            return { type: 'stream' };
        }
        if (depth === 0) {
            return Array.isArray(element) ? exports.ARRAY_STR : exports.OBJECT_STR;
        }
        seenObjects.push(element);
        const elementCopy = Array.isArray(element) ? [] : {};
        Object.keys(element).forEach((key) => {
            // seenObjects.slice creates a copy of seenObjects at the current state
            elementCopy[key] = cloneAndSanitizeObject(element[key], maxStrSize, depth - 1, seenObjects.slice(), key);
        });
        return elementCopy;
    }
    if (objType === 'string') {
        const currentKeyNormalized = currentKey === null || currentKey === void 0 ? void 0 : currentKey.toLowerCase();
        if (currentKeyNormalized && exports.authFields.includes(currentKeyNormalized)) {
            element = sanitizeAuth(element);
        }
        return element.length <= maxStrSize ? element : `${element.substr(0, maxStrSize)}${exports.TRUNCATED_STR}`;
    }
    if (objType === 'number' || objType === 'bigint' || objType === 'boolean' || objType === 'symbol') {
        return element;
    }
    if (objType === 'function') {
        return `[function: ${element.name || 'anonymous'}]`;
    }
    return `[${objType}]`;
}
exports.cloneAndSanitizeObject = cloneAndSanitizeObject;
