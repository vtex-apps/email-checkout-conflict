"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../../../../constants");
const utils_1 = require("../../../../../utils");
const index_1 = require("../schema/index");
exports.updateSchema = (graphql, executableSchema) => async function updateRunnableSchema(ctx, next) {
    const { clients: { apps }, vtex: { logger }, app, } = ctx;
    if (!ctx.headers[constants_1.PROVIDER_HEADER]) {
        await next();
        return;
    }
    // fetches the new schema and generate a new runnable schema, updates the provider app,
    if (executableSchema.hasProvider &&
        (!executableSchema.provider ||
            utils_1.majorEqualAndGreaterThan(utils_1.parseAppId(ctx.headers[constants_1.PROVIDER_HEADER]).version, utils_1.parseAppId(executableSchema.provider).version))) {
        try {
            const newSchema = (await apps.getAppFile(ctx.headers[constants_1.PROVIDER_HEADER], 'public/schema.graphql')).data.toString('utf-8');
            graphql.schema = newSchema;
            const newRunnableSchema = index_1.makeSchema(graphql);
            executableSchema.schema = newRunnableSchema.schema;
            executableSchema.provider = ctx.headers[constants_1.PROVIDER_HEADER];
        }
        catch (error) {
            logger.error({ error, message: 'Update schema failed', app });
        }
    }
    await next();
};
