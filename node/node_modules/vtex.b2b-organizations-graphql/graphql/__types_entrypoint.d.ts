export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Data: any;
  IOSanitizedString: any;
  IOUpload: any;
  Upload: any;
};

export type Address = {
  __typename?: 'Address';
  addressId?: Maybe<Scalars['String']>;
  addressType?: Maybe<Scalars['String']>;
  addressQuery?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
  reference?: Maybe<Scalars['String']>;
};

export type AddressInput = {
  addressId?: Maybe<Scalars['String']>;
  addressType?: Maybe<Scalars['String']>;
  addressQuery?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
  reference?: Maybe<Scalars['String']>;
};

export type B2BUser = {
  __typename?: 'B2BUser';
  id?: Maybe<Scalars['ID']>;
  roleId?: Maybe<Scalars['ID']>;
  userId?: Maybe<Scalars['ID']>;
  clId?: Maybe<Scalars['ID']>;
  orgId?: Maybe<Scalars['ID']>;
  costId?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  email: Scalars['String'];
  canImpersonate?: Maybe<Scalars['Boolean']>;
  role?: Maybe<SimpleRole>;
  organizationName?: Maybe<Scalars['String']>;
  costCenterName?: Maybe<Scalars['String']>;
};

export type B2BUserInput = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};

export type B2BUserSimple = {
  __typename?: 'B2BUserSimple';
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
};

export type Collection = {
  __typename?: 'Collection';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type CollectionInput = {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type CostCenter = {
  __typename?: 'CostCenter';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  organization?: Maybe<Scalars['ID']>;
  addresses?: Maybe<Array<Maybe<Address>>>;
  paymentTerms?: Maybe<Array<Maybe<PaymentTerm>>>;
};

export type CostCenterInput = {
  name?: Maybe<Scalars['String']>;
  addresses?: Maybe<Array<Maybe<AddressInput>>>;
  paymentTerms?: Maybe<Array<Maybe<PaymentTermInput>>>;
};

export type CostCenterResult = {
  __typename?: 'CostCenterResult';
  data?: Maybe<Array<Maybe<CostCenter>>>;
  pagination?: Maybe<Pagination>;
};


export type DefaultCostCenter = {
  __typename?: 'DefaultCostCenter';
  name?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
};

export type DefaultCostCenterInput = {
  name?: Maybe<Scalars['String']>;
  address?: Maybe<AddressInput>;
};



export type MasterDataResponse = {
  __typename?: 'MasterDataResponse';
  id?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  saveAppSettings?: Maybe<MutationResponse>;
  createOrganizationRequest?: Maybe<MasterDataResponse>;
  updateOrganizationRequest?: Maybe<MutationResponse>;
  deleteOrganizationRequest?: Maybe<MutationResponse>;
  createOrganization?: Maybe<MasterDataResponse>;
  createCostCenter?: Maybe<MasterDataResponse>;
  updateOrganization?: Maybe<MutationResponse>;
  updateCostCenter?: Maybe<MutationResponse>;
  deleteOrganization?: Maybe<MutationResponse>;
  deleteCostCenter?: Maybe<MutationResponse>;
  saveUser?: Maybe<MutationResponse>;
  removeUser?: Maybe<MutationResponse>;
};


export type MutationCreateOrganizationRequestArgs = {
  input: OrganizationInput;
};


export type MutationUpdateOrganizationRequestArgs = {
  id: Scalars['ID'];
  status: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
};


export type MutationDeleteOrganizationRequestArgs = {
  id: Scalars['ID'];
};


export type MutationCreateOrganizationArgs = {
  input: OrganizationInput;
};


export type MutationCreateCostCenterArgs = {
  organizationId?: Maybe<Scalars['ID']>;
  input: CostCenterInput;
};


export type MutationUpdateOrganizationArgs = {
  id: Scalars['ID'];
  name: Scalars['String'];
  status: Scalars['String'];
  collections?: Maybe<Array<Maybe<CollectionInput>>>;
  paymentTerms?: Maybe<Array<Maybe<PaymentTermInput>>>;
  priceTables?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MutationUpdateCostCenterArgs = {
  id: Scalars['ID'];
  input: CostCenterInput;
};


export type MutationDeleteOrganizationArgs = {
  id: Scalars['ID'];
};


export type MutationDeleteCostCenterArgs = {
  id: Scalars['ID'];
};


export type MutationSaveUserArgs = {
  id?: Maybe<Scalars['ID']>;
  roleId: Scalars['ID'];
  userId?: Maybe<Scalars['ID']>;
  orgId?: Maybe<Scalars['ID']>;
  costId?: Maybe<Scalars['ID']>;
  clId?: Maybe<Scalars['ID']>;
  canImpersonate?: Maybe<Scalars['Boolean']>;
  name: Scalars['String'];
  email: Scalars['String'];
};


export type MutationRemoveUserArgs = {
  id: Scalars['ID'];
  userId?: Maybe<Scalars['ID']>;
  email: Scalars['String'];
  clId: Scalars['ID'];
};

export type MutationResponse = {
  __typename?: 'MutationResponse';
  id?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
};

export type Organization = {
  __typename?: 'Organization';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  collections?: Maybe<Array<Maybe<Collection>>>;
  paymentTerms?: Maybe<Array<Maybe<PaymentTerm>>>;
  priceTables?: Maybe<Array<Maybe<Scalars['String']>>>;
  costCenters?: Maybe<Array<Maybe<Scalars['ID']>>>;
  status?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['String']>;
};

export type OrganizationInput = {
  name?: Maybe<Scalars['String']>;
  b2bCustomerAdmin?: Maybe<B2BUserInput>;
  defaultCostCenter?: Maybe<DefaultCostCenterInput>;
};

export type OrganizationRequest = {
  __typename?: 'OrganizationRequest';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  defaultCostCenter?: Maybe<DefaultCostCenter>;
  b2bCustomerAdmin?: Maybe<B2BUserSimple>;
  status?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['String']>;
};

export type OrganizationRequestResult = {
  __typename?: 'OrganizationRequestResult';
  data?: Maybe<Array<Maybe<OrganizationRequest>>>;
  pagination?: Maybe<Pagination>;
};

export type OrganizationResult = {
  __typename?: 'OrganizationResult';
  data?: Maybe<Array<Maybe<Organization>>>;
  pagination?: Maybe<Pagination>;
};

export type Pagination = {
  __typename?: 'Pagination';
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  total?: Maybe<Scalars['Int']>;
};

export type PaymentTerm = {
  __typename?: 'PaymentTerm';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type PaymentTermInput = {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  getAppSettings?: Maybe<SettingsResponse>;
  getOrganizationRequests?: Maybe<OrganizationRequestResult>;
  getOrganizationRequestById?: Maybe<OrganizationRequest>;
  getOrganizations?: Maybe<OrganizationResult>;
  getOrganizationById?: Maybe<Organization>;
  getOrganizationByIdStorefront?: Maybe<Organization>;
  getCostCenters?: Maybe<CostCenterResult>;
  getCostCentersByOrganizationId?: Maybe<CostCenterResult>;
  getCostCentersByOrganizationIdStorefront?: Maybe<CostCenterResult>;
  getCostCenterById?: Maybe<CostCenter>;
  getCostCenterByIdStorefront?: Maybe<CostCenter>;
  getUsers?: Maybe<Array<Maybe<B2BUser>>>;
  getPaymentTerms?: Maybe<Array<Maybe<PaymentTerm>>>;
};


export type QueryGetOrganizationRequestsArgs = {
  status?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  sortOrder?: Maybe<Scalars['String']>;
  sortedBy?: Maybe<Scalars['String']>;
};


export type QueryGetOrganizationRequestByIdArgs = {
  id: Scalars['ID'];
};


export type QueryGetOrganizationsArgs = {
  status?: Maybe<Array<Maybe<Scalars['String']>>>;
  search?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  sortOrder?: Maybe<Scalars['String']>;
  sortedBy?: Maybe<Scalars['String']>;
};


export type QueryGetOrganizationByIdArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryGetOrganizationByIdStorefrontArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryGetCostCentersArgs = {
  search?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  sortOrder?: Maybe<Scalars['String']>;
  sortedBy?: Maybe<Scalars['String']>;
};


export type QueryGetCostCentersByOrganizationIdArgs = {
  id?: Maybe<Scalars['ID']>;
  search?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  sortOrder?: Maybe<Scalars['String']>;
  sortedBy?: Maybe<Scalars['String']>;
};


export type QueryGetCostCentersByOrganizationIdStorefrontArgs = {
  id?: Maybe<Scalars['ID']>;
  search?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  sortOrder?: Maybe<Scalars['String']>;
  sortedBy?: Maybe<Scalars['String']>;
};


export type QueryGetCostCenterByIdArgs = {
  id: Scalars['ID'];
};


export type QueryGetCostCenterByIdStorefrontArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryGetUsersArgs = {
  organizationId?: Maybe<Scalars['ID']>;
  costCenterId?: Maybe<Scalars['ID']>;
};

export type SettingsResponse = {
  __typename?: 'SettingsResponse';
  adminSetup?: Maybe<Scalars['Data']>;
};

export type SimpleRole = {
  __typename?: 'SimpleRole';
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  slug?: Maybe<Scalars['String']>;
};


export {}